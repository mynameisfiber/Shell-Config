*imagettftext* -- Write text to the image using TrueType fonts

  array imagettftext(resource image, float size, float angle, int x, int y, int color, string fontfile, string text)~

Writes the given {text} into the image using TrueType fonts.

{ image}An image resource, returned by one of the image creation functions,
such as |imagecreatetruecolor|.

{size} The font size. Depending on your version of GD, this should be
specified as the pixel size (GD1) or point size (GD2).

{angle} The angle in degrees, with 0 degrees being left-to-right reading text.
Higher values represent a counter-clockwise rotation. For example, a value of
90 would result in bottom-to-top reading text.

{x} The coordinates given by {x} and {y} will define the basepoint of the
first character (roughly the lower-left corner of the character). This is
different from the |imagestring|, where {x} and {y} define the upper-left
corner of the first character. For example, "top left" is 0, 0.

{y} The y-ordinate. This sets the position of the fonts baseline, not the very
bottom of the character.

{color} The color index. Using the negative of a color index has the effect of
turning off antialiasing. See |imagecolorallocate|.

{fontfile} The path to the TrueType font you wish to use.

Depending on which version of the GD library PHP is using, when {fontfile}
does not begin with a leading / then .ttf will be appended to the filename and
the library will attempt to search for that filename along a library-defined
font path.

When using versions of the GD library lower than 2.0.18, a space character,
rather than a semicolon, was used as the 'path separator' for different font
files. Unintentional use of this feature will result in the warning message:
Warning: Could not find/open font. For these affected versions, the only
solution is moving the font to a path which does not contain spaces.

In many cases where a font resides in the same directory as the script using
it the following trick will alleviate any include problems.

<?php >
  // Set the enviroment variable for GD
  putenv('GDFONTPATH=' . realpath('.'));
  
  // Name the font to be used (note the lack of the .ttf extension)
  $font = 'SomeFont';
?>



{text} The text string in UTF-8 encoding.

May include decimal numeric character references (of the form: &#8364;) to
access characters in a font beyond position 127. The hexadecimal format (like
&#xA9;) is supported. Strings in UTF-8 encoding can be passed directly.

Named entities, such as &copy;, are not supported. Consider using
|html_entity_decode| to decode these named entities into UTF-8 strings
(html_entity_decode() supports this as of PHP 5.0.0).

If a character is used in the string which is not supported by the font, a
hollow rectangle will replace the character.

Returns an array with 8 elements representing four points making the bounding
box of the text. The order of the points is lower left, lower right, upper
right, upper left. The points are relative to the text regardless of the
angle, so "upper left" means in the top left-hand corner when you see the text
horizontally. Returns FALSE on error.

Version Description 5.2.0 It is now possible to specify an hexadecimal entity
in {text}.

|imagettftext| example This example script will produce a white PNG 400x30
pixels, with the words "Testing..." in black (with grey shadow), in the font
Arial.

<?php >
  // Set the content-type
  header('Content-type: image/png');
  
  // Create the image
  $im = imagecreatetruecolor(400, 30);
  
  // Create some colors
  $white = imagecolorallocate($im, 255, 255, 255);
  $grey = imagecolorallocate($im, 128, 128, 128);
  $black = imagecolorallocate($im, 0, 0, 0);
  imagefilledrectangle($im, 0, 0, 399, 29, $white);
  
  // The text to draw
  $text = 'Testing...';
  // Replace path by your own font path
  $font = 'arial.ttf';
  
  // Add some shadow to the text
  imagettftext($im, 20, 0, 11, 21, $grey, $font, $text);
  
  // Add the text
  imagettftext($im, 20, 0, 10, 20, $black, $font, $text);
  
  // Using imagepng() results in clearer text compared with imagejpeg()
  imagepng($im);
  imagedestroy($im);
?>

The above example will output something similar to:

Output of example : imagettftext()



This function requires both the GD library and the FreeType library.

|imagettfbbox|

vim:ft=help:
