*pg_fetch_array* -- Fetch a row as an array

  array pg_fetch_array(resource result [, int row [, int result_type]])~

|pg_fetch_array| returns an array that corresponds to the fetched row
(record).

|pg_fetch_array| is an extended version of |pg_fetch_row|. In addition to
storing the data in the numeric indices (field number) to the result array, it
can also store the data using associative indices (field name). It stores both
indicies by default.

This function sets NULL fields to the PHP NULL value.

|pg_fetch_array| is NOT significantly slower than using |pg_fetch_row|, and is
significantly easier to use.

{result} PostgreSQL query result resource, returned by |pg_query|,
|pg_query_params| or |pg_execute| (among others).

{row} Row number in result to fetch. Rows are numbered from 0 upwards. If
omitted or NULL, the next row is fetched.

{result_type} An optional parameter that controls how the returned array is
indexed. {result_type} is a constant and can take the following values:
PGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH. Using PGSQL_NUM, |pg_fetch_array| will
return an array with numerical indices, using PGSQL_ASSOC it will return only
associative indices while PGSQL_BOTH, the default, will return both numerical
and associative indices.

An array indexed numerically (beginning with 0) or associatively (indexed by
field name), or both. Each value in the array is represented as a string.
Database NULL values are returned as NULL.

FALSE is returned if {row} exceeds the number of rows in the set, there are no
more rows, or on any other error.

Version Description 4.1.0 The {row} parameter became optional.

|pg_fetch_array| example

<?php >
  $conn = pg_pconnect("dbname=publisher");
  if (!$conn) {
    echo "An error occured.\n";
    exit;
  }
  
  $result = pg_query($conn, "SELECT author, email FROM authors");
  if (!$result) {
    echo "An error occured.\n";
    exit;
  }
  
  $arr = pg_fetch_array($result, 0, PGSQL_NUM);
  echo $arr[0] . " <- Row 1 Author\n";
  echo $arr[1] . " <- Row 1 E-mail\n";
  
  // As of PHP 4.1.0, the row parameter is optional; NULL can be passed instead,
  // to pass a result_type.  Successive calls to pg_fetch_array will return the
  // next row.
  $arr = pg_fetch_array($result, NULL, PGSQL_ASSOC);
  echo $arr["author"] . " <- Row 2 Author\n";
  echo $arr["email"] . " <- Row 2 E-mail\n";
  
  $arr = pg_fetch_array($result);
  echo $arr["author"] . " <- Row 3 Author\n";
  echo $arr[1] . " <- Row 3 E-mail\n";
?>





|pg_fetch_row| |pg_fetch_object| |pg_fetch_result|

vim:ft=help:
