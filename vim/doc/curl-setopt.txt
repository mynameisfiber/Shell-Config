*curl_setopt* -- Set an option for a cURL transfer

  bool curl_setopt(resource ch, int option, mixed value)~

Sets an option on the given cURL session handle.

{ch} A cURL handle returned by |curl_init|.

{option} The CURLOPT_XXX option to set.

{value} The value to be set on {option}.

{value} should be a bool for the following values of the {option} parameter:
Option Set {value} to Notes CURLOPT_AUTOREFERER TRUE to automatically set the
Referer: field in requests where it follows a Location: redirect.
CURLOPT_BINARYTRANSFER TRUE to return the raw output when
CURLOPT_RETURNTRANSFER is used. CURLOPT_COOKIESESSION TRUE to mark this as a
new cookie "session". It will force libcurl to ignore all cookies it is about
to load that are "session cookies" from the previous session. By default,
libcurl always stores and loads all cookies, independent if they are session
cookies or not. Session cookies are cookies without expiry date and they are
meant to be alive and existing for this "session" only. CURLOPT_CERTINFO TRUE
to output SSL certification information to STDERR on secure transfers.
Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be on to have an
effect. CURLOPT_CRLF TRUE to convert Unix newlines to CRLF newlines on
transfers. CURLOPT_DNS_USE_GLOBAL_CACHE TRUE to use a global DNS cache. This
option is not thread-safe and is enabled by default. CURLOPT_FAILONERROR TRUE
to fail silently if the HTTP code returned is greater than or equal to 400.
The default behavior is to return the page normally, ignoring the code.
CURLOPT_FILETIME TRUE to attempt to retrieve the modification date of the
remote document. This value can be retrieved using the {CURLINFO_FILETIME}
option with |curl_getinfo|. CURLOPT_FOLLOWLOCATION TRUE to follow any
"Location: " header that the server sends as part of the HTTP header (note
this is recursive, PHP will follow as many "Location: " headers that it is
sent, unless CURLOPT_MAXREDIRS is set). CURLOPT_FORBID_REUSE TRUE to force the
connection to explicitly close when it has finished processing, and not be
pooled for reuse. CURLOPT_FRESH_CONNECT TRUE to force the use of a new
connection instead of a cached one. CURLOPT_FTP_USE_EPRT TRUE to use EPRT (and
LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and
use PORT only. CURLOPT_FTP_USE_EPSV TRUE to first try an EPSV command for FTP
transfers before reverting back to PASV. Set to FALSE to disable EPSV.
CURLOPT_FTPAPPEND TRUE to append to the remote file instead of overwriting it.
CURLOPT_FTPASCII An alias of CURLOPT_TRANSFERTEXT. Use that instead.
CURLOPT_FTPLISTONLY TRUE to only list the names of an FTP directory.
CURLOPT_HEADER TRUE to include the header in the output. CURLINFO_HEADER_OUT
TRUE to track the handle's request string. Available since PHP 5.1.3. The
CURLINFO_ prefix is intentional. CURLOPT_HTTPGET TRUE to reset the HTTP
request method to GET. Since GET is the default, this is only necessary if the
request method has been changed. CURLOPT_HTTPPROXYTUNNEL TRUE to tunnel
through a given HTTP proxy. CURLOPT_MUTE TRUE to be completely silent with
regards to the cURL functions. CURLOPT_NETRC TRUE to scan the ~/.netrc file to
find a username and password for the remote site that a connection is being
established with. CURLOPT_NOBODY TRUE to exclude the body from the output.
Request method is then set to HEAD. Changing this to FALSE does not change it
to GET. CURLOPT_NOPROGRESS TRUE to disable the progress meter for cURL
transfers. PHP automatically sets this option to TRUE, this should only be
changed for debugging purposes.

CURLOPT_NOSIGNAL TRUE to ignore any cURL function that causes a signal to be
sent to the PHP process. This is turned on by default in multi-threaded SAPIs
so timeout options can still be used. Added in cURL 7.10. CURLOPT_POST TRUE to
do a regular HTTP POST. This POST is the normal
application/x-www-form-urlencoded kind, most commonly used by HTML forms.
CURLOPT_PUT TRUE to HTTP PUT a file. The file to PUT must be set with
CURLOPT_INFILE and CURLOPT_INFILESIZE. CURLOPT_RETURNTRANSFER TRUE to return
the transfer as a string of the return value of |curl_exec| instead of
outputting it out directly. CURLOPT_SSL_VERIFYPEER FALSE to stop cURL from
verifying the peer's certificate. Alternate certificates to verify against can
be specified with the CURLOPT_CAINFO option or a certificate directory can be
specified with the CURLOPT_CAPATH option. CURLOPT_SSL_VERIFYHOST may also need
to be TRUE or FALSE if CURLOPT_SSL_VERIFYPEER is disabled (it defaults to 2).
TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10.
CURLOPT_TRANSFERTEXT TRUE to use ASCII mode for FTP transfers. For LDAP, it
retrieves data in plain text instead of HTML. On Windows systems, it will not
set STDOUT to binary mode. CURLOPT_UNRESTRICTED_AUTH TRUE to keep sending the
username and password when following locations (using CURLOPT_FOLLOWLOCATION),
even when the hostname has changed. CURLOPT_UPLOAD TRUE to prepare for an
upload. CURLOPT_VERBOSE TRUE to output verbose information. Writes output to
STDERR, or the file specified using CURLOPT_STDERR.

{value} should be an integer for the following values of the {option}
parameter: Option Set {value} to Notes CURLOPT_BUFFERSIZE The size of the
buffer to use for each read. There is no guarantee this request will be
fulfilled, however. Added in cURL 7.10. CURLOPT_CLOSEPOLICY Either
{CURLCLOSEPOLICY_LEAST_RECENTLY_USED} or {CURLCLOSEPOLICY_OLDEST}. There are
three other CURLCLOSEPOLICY_ constants, but cURL does not support them yet.
CURLOPT_CONNECTTIMEOUT The number of seconds to wait while trying to connect.
Use 0 to wait indefinitely. CURLOPT_CONNECTTIMEOUT_MS The number of
milliseconds to wait while trying to connect. Use 0 to wait indefinitely. If
libcurl is built to use the standard system name resolver, that portion of the
connect will still use full-second resolution for timeouts with a minimum
timeout allowed of one second. Added in cURL 7.16.2. Available since PHP
5.2.3. CURLOPT_DNS_CACHE_TIMEOUT The number of seconds to keep DNS entries in
memory. This option is set to 120 (2 minutes) by default. CURLOPT_FTPSSLAUTH
The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL
first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL
decide). Added in cURL 7.12.2. CURLOPT_HTTP_VERSION {CURL_HTTP_VERSION_NONE}
(default, lets CURL decide which version to use), {CURL_HTTP_VERSION_1_0}
(forces HTTP/1.0), or {CURL_HTTP_VERSION_1_1} (forces HTTP/1.1).
CURLOPT_HTTPAUTH The HTTP authentication method(s) to use. The options are:
{CURLAUTH_BASIC}, {CURLAUTH_DIGEST}, {CURLAUTH_GSSNEGOTIATE}, {CURLAUTH_NTLM},
{CURLAUTH_ANY}, and {CURLAUTH_ANYSAFE}.

The bitwise | (or) operator can be used to combine more than one method. If
this is done, cURL will poll the server to see what methods it supports and
pick the best one.

{CURLAUTH_ANY} is an alias for CURLAUTH_BASIC | CURLAUTH_DIGEST |
CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.

{CURLAUTH_ANYSAFE} is an alias for CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE |
CURLAUTH_NTLM.

CURLOPT_INFILESIZE The expected size, in bytes, of the file when uploading a
file to a remote site. CURLOPT_LOW_SPEED_LIMIT The transfer speed, in bytes
per second, that the transfer should be below during the count of
CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow and
aborts. CURLOPT_LOW_SPEED_TIME The number of seconds the transfer speed should
be below CURLOPT_LOW_SPEED_LIMIT before PHP considers the transfer too slow
and aborts. CURLOPT_MAXCONNECTS The maximum amount of persistent connections
that are allowed. When the limit is reached, CURLOPT_CLOSEPOLICY is used to
determine which connection to close. CURLOPT_MAXREDIRS The maximum amount of
HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION.
CURLOPT_PORT An alternative port number to connect to. CURLOPT_PROTOCOLS
Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols
libcurl may use in the transfer. This allows you to have a libcurl built to
support a wide range of protocols but still limit specific transfers to only
be allowed to use a subset of them. By default libcurl will accept all
protocols it supports. See also CURLOPT_REDIR_PROTOCOLS.

Valid protocol options are: {CURLPROTO_HTTP}, {CURLPROTO_HTTPS},
{CURLPROTO_FTP}, {CURLPROTO_FTPS}, {CURLPROTO_SCP}, {CURLPROTO_SFTP},
{CURLPROTO_TELNET}, {CURLPROTO_LDAP}, {CURLPROTO_LDAPS}, {CURLPROTO_DICT},
{CURLPROTO_FILE}, {CURLPROTO_TFTP}, {CURLPROTO_ALL}

Added in cURL 7.19.4. CURLOPT_PROXYAUTH The HTTP authentication method(s) to
use for the proxy connection. Use the same bitmasks as described in
CURLOPT_HTTPAUTH. For proxy authentication, only {CURLAUTH_BASIC} and
{CURLAUTH_NTLM} are currently supported. Added in cURL 7.10.7.
CURLOPT_PROXYPORT The port number of the proxy to connect to. This port number
can also be set in CURLOPT_PROXY. CURLOPT_PROXYTYPE Either {CURLPROXY_HTTP}
(default) or {CURLPROXY_SOCKS5}. Added in cURL 7.10. CURLOPT_REDIR_PROTOCOLS
Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols
libcurl may use in a transfer that it follows to in a redirect when
CURLOPT_FOLLOWLOCATION is enabled. This allows you to limit specific transfers
to only be allowed to use a subset of protocols in redirections. By default
libcurl will allow all protocols except for FILE and SCP. This is a difference
compared to pre-7.19.4 versions which unconditionally would follow to all
protocols supported. See also CURLOPT_PROTOCOLS for protocol constant values.
Added in cURL 7.19.4. CURLOPT_RESUME_FROM The offset, in bytes, to resume a
transfer from. CURLOPT_SSL_VERIFYHOST 1 to check the existence of a common
name in the SSL peer certificate. 2 to check the existence of a common name
and also verify that it matches the hostname provided. CURLOPT_SSLVERSION The
SSL version (2 or 3) to use. By default PHP will try to determine this itself,
although in some cases this must be set manually. CURLOPT_TIMECONDITION How
CURLOPT_TIMEVALUE is treated. Use {CURL_TIMECOND_IFMODSINCE} to return the
page only if it has been modified since the time specified in
CURLOPT_TIMEVALUE. If it hasn't been modified, a "304 Not Modified" header
will be returned assuming CURLOPT_HEADER is TRUE. Use
{CURL_TIMECOND_IFUNMODSINCE} for the reverse effect.
{CURL_TIMECOND_IFMODSINCE} is the default. CURLOPT_TIMEOUT The maximum number
of seconds to allow cURL functions to execute. CURLOPT_TIMEOUT_MS The maximum
number of milliseconds to allow cURL functions to execute. If libcurl is built
to use the standard system name resolver, that portion of the connect will
still use full-second resolution for timeouts with a minimum timeout allowed
of one second. Added in cURL 7.16.2. Available since PHP 5.2.3.
CURLOPT_TIMEVALUE The time in seconds since January 1st, 1970. The time will
be used by CURLOPT_TIMECONDITION. By default, {CURL_TIMECOND_IFMODSINCE} is
used.

{value} should be a string for the following values of the {option} parameter:
Option Set {value} to Notes CURLOPT_CAINFO The name of a file holding one or
more certificates to verify the peer with. This only makes sense when used in
combination with CURLOPT_SSL_VERIFYPEER. Requires absolute path.
CURLOPT_CAPATH A directory that holds multiple CA certificates. Use this
option alongside CURLOPT_SSL_VERIFYPEER. CURLOPT_COOKIE The contents of the
"Cookie: " header to be used in the HTTP request. Note that multiple cookies
are separated with a semicolon followed by a space (e.g., "fruit=apple;
colour=red") CURLOPT_COOKIEFILE The name of the file containing the cookie
data. The cookie file can be in Netscape format, or just plain HTTP-style
headers dumped into a file. CURLOPT_COOKIEJAR The name of a file to save all
internal cookies to when the handle is closed, e.g. after a call to
curl_close. CURLOPT_CUSTOMREQUEST A custom request method to use instead of
"GET" or "HEAD" when doing a HTTP request. This is useful for doing "DELETE"
or other, more obscure HTTP requests. Valid values are things like "GET",
"POST", "CONNECT" and so on; i.e. Do not enter a whole HTTP request line here.
For instance, entering "GET /index.html HTTP/1.0\r\n\r\n" would be incorrect.
Don't do this without making sure the server supports the custom request
method first.

vim:ft=help:
