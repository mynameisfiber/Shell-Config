*SQLiteUnbuffered->fetch* -- Fetches the next row from a result set as an array

  array sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])~

Object oriented style (method):

  array fetch(resource result [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary]]]])~

  array fetch(resource result [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary]]]]]])~

Fetches the next row from the given {result} handle. If there are no more
rows, returns FALSE, otherwise returns an associative array representing the
row data.

{result} The SQLite result resource. This parameter is not required when using
the object-oriented method.

{result_type} The optional {result_type} parameter accepts a constant and
determines how the returned array will be indexed. Using SQLITE_ASSOC will
return only associative indices (named fields) while SQLITE_NUM will return
only numerical indices (ordinal field numbers). SQLITE_BOTH will return both
associative and numerical indices. SQLITE_BOTH is the default for this
function.

{decode_binary} When the {decode_binary} parameter is set to TRUE (the
default), PHP will decode the binary encoding it applied to the data if it was
encoded using the |sqlite_escape_string|. You should normally leave this value
at its default, unless you are interoperating with databases created by other
sqlite capable applications.

Returns an array of the next row from a result set; FALSE if the next position
is beyond the final row.

The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded
according to the value of the sqlite.assoc_case configuration option.

Procedural example

<?php >
  $dbhandle = sqlite_open('sqlitedb');
  $query = sqlite_query($dbhandle, 'SELECT name, email FROM users LIMIT 25');
  while ($entry = sqlite_fetch_array($query, SQLITE_ASSOC)) {
      echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
  }
?>





Object-oriented example

<?php >
  $dbhandle = new SQLiteDatabase('sqlitedb');
  
  $query = $dbhandle->query('SELECT name, email FROM users LIMIT 25'); // buffered result set
  $query = $dbhandle->unbufferedQuery('SELECT name, email FROM users LIMIT 25'); // unbuffered result set
  
  while ($entry = $query->fetch(SQLITE_ASSOC)) {
      echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
  }
?>





|sqlite_array_query| |sqlite_fetch_string|

vim:ft=help:
