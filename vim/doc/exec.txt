*exec* -- Execute an external program

  string exec(string command [, array output [, int return_var]])~

|exec| executes the given {command}.

{command} The command that will be executed.

{output} If the {output} argument is present, then the specified array will be
filled with every line of output from the command. Trailing whitespace, such
as \n, is not included in this array. Note that if the array already contains
some elements, |exec| will append to the end of the array. If you do not want
the function to append elements, call |unset| on the array before passing it
to |exec|.

{return_var} If the {return_var} argument is present along with the {output}
argument, then the return status of the executed command will be written to
this variable.

The last line from the result of the command. If you need to execute a command
and have all the data from the command passed directly back without any
interference, use the |passthru| function.

To get the output of the executed command, be sure to set and use the {output}
parameter.

An |exec| example

<?php >
  // outputs the username that owns the running php/httpd process
  // (on a system with the "whoami" executable in the path)
  echo exec('whoami');
?>





When allowing user-supplied data to be passed to this function, use
|escapeshellarg| or |escapeshellcmd| to ensure that users cannot trick the
system into executing arbitrary commands.

If a program is started with this function, in order for it to continue
running in the background, the output of the program must be redirected to a
file or another output stream. Failing to do so will cause PHP to hang until
the execution of the program ends.

When safe mode is enabled, you can only execute files within the
safe_mode_exec_dir. For practical reasons, it is currently not allowed to have
.. components in the path to the executable.

With safe mode enabled, the command string is escaped with |escapeshellcmd|.
Thus, echo y | echo x becomes echo y \| echo x.

|system| |passthru| |escapeshellcmd| |pcntl_exec| backtick operator

vim:ft=help:
