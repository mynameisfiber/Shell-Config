*SQLiteUnbuffered->current* -- Fetches the current row from a result set as an
array

  array sqlite_current(resource result [, int result_type [, bool decode_binary]])~

Object oriented style (method):

  array current(resource result [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary]]]])~

  array current(resource result [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary [, int result_type [, bool decode_binary]]]]]])~

|sqlite_current| is identical to |sqlite_fetch_array| except that it does not
advance to the next row prior to returning the data; it returns the data from
the current position only.

{result} The SQLite result resource. This parameter is not required when using
the object-oriented method.

{result_type} The optional {result_type} parameter accepts a constant and
determines how the returned array will be indexed. Using SQLITE_ASSOC will
return only associative indices (named fields) while SQLITE_NUM will return
only numerical indices (ordinal field numbers). SQLITE_BOTH will return both
associative and numerical indices. SQLITE_BOTH is the default for this
function.

{decode_binary} When the {decode_binary} parameter is set to TRUE (the
default), PHP will decode the binary encoding it applied to the data if it was
encoded using the |sqlite_escape_string|. You should normally leave this value
at its default, unless you are interoperating with databases created by other
sqlite capable applications.

Returns an array of the current row from a result set; FALSE if the current
position is beyond the final row.

The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded
according to the value of the sqlite.assoc_case configuration option.

|sqlite_seek| |sqlite_next| |sqlite_fetch_array|

vim:ft=help:
