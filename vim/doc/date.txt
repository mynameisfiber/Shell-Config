*date* -- Format a local time/date

  string date(string format [, int timestamp])~

Returns a string formatted according to the given format string using the
given integer {timestamp} or the current time if no timestamp is given. In
other words, {timestamp} is optional and defaults to the value of |time|.

{format} The format of the outputted date string. See the formatting options
below. There are also several predefined date constants that may be used
instead, so for example DATE_RSS contains the format string 'D, d M Y H:i:s'.

The following characters are recognized in the {format} parameter string
{format} character Description Example returned values Day --- --- d Day of
the month, 2 digits with leading zeros 01 to 31 D A textual representation of
a day, three letters Mon through Sun j Day of the month without leading zeros
1 to 31 l (lowercase 'L') A full textual representation of the day of the week
Sunday through Saturday N ISO-8601 numeric representation of the day of the
week (added in PHP 5.1.0) 1 (for Monday) through 7 (for Sunday) S English
ordinal suffix for the day of the month, 2 characters st, nd, rd or th. Works
well with j w Numeric representation of the day of the week 0 (for Sunday)
through 6 (for Saturday) z The day of the year (starting from 0) 0 through 365
Week --- --- W ISO-8601 week number of year, weeks starting on Monday (added
in PHP 4.1.0) Example: 42 (the 42nd week in the year) Month --- --- F A full
textual representation of a month, such as January or March January through
December m Numeric representation of a month, with leading zeros 01 through 12
M A short textual representation of a month, three letters Jan through Dec n
Numeric representation of a month, without leading zeros 1 through 12 t Number
of days in the given month 28 through 31 Year --- --- L Whether it's a leap
year 1 if it is a leap year, 0 otherwise. o ISO-8601 year number. This has the
same value as Y, except that if the ISO week number (W) belongs to the
previous or next year, that year is used instead. (added in PHP 5.1.0)
Examples: 1999 or 2003 Y A full numeric representation of a year, 4 digits
Examples: 1999 or 2003 y A two digit representation of a year Examples: 99 or
03 Time --- --- a Lowercase Ante meridiem and Post meridiem am or pm A
Uppercase Ante meridiem and Post meridiem AM or PM B Swatch Internet time 000
through 999 g 12-hour format of an hour without leading zeros 1 through 12 G
24-hour format of an hour without leading zeros 0 through 23 h 12-hour format
of an hour with leading zeros 01 through 12 H 24-hour format of an hour with
leading zeros 00 through 23 i Minutes with leading zeros 00 to 59 s Seconds,
with leading zeros 00 through 59 u Microseconds (added in PHP 5.2.2) Example:
654321 Timezone --- --- e Timezone identifier (added in PHP 5.1.0) Examples:
UTC, GMT, Atlantic/Azores I (capital i) Whether or not the date is in daylight
saving time 1 if Daylight Saving Time, 0 otherwise. O Difference to Greenwich
time (GMT) in hours Example: +0200 P Difference to Greenwich time (GMT) with
colon between hours and minutes (added in PHP 5.1.3) Example: +02:00 T
Timezone abbreviation Examples: EST, MDT ... Z Timezone offset in seconds. The
offset for timezones west of UTC is always negative, and for those east of UTC
is always positive. -43200 through 50400 Full Date/Time --- --- c ISO 8601
date (added in PHP 5) 2004-02-12T15:19:21+00:00 r RFC 2822 formatted date
Example: Thu, 21 Dec 2000 16:01:07 +0200 U Seconds since the Unix Epoch
(January 1 1970 00:00:00 GMT) See also |time|

Unrecognized characters in the format string will be printed as-is. The Z
format will always return 0 when using |gmdate|.

Since this function only accepts integer timestamps the u format character is
only useful when using the |date_format| function with user based timestamps
created with |date_create|.

{timestamp} The optional {timestamp} parameter is an integer Unix timestamp
that defaults to the current local time if a {timestamp} is not given. In
other words, it defaults to the value of |time|.

Returns a formatted date string. If a non-numeric value is used for
{timestamp}, FALSE is returned and an E_WARNING level error is emitted.

Every call to a date/time function will generate a E_NOTICE if the time zone
is not valid, and/or a E_STRICT or E_WARNING message if using the system
settings or the TZ environment variable. See also |date_default_timezone_set|

Version Description 5.1.0 The valid range of a timestamp is typically from
Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the
dates that correspond to the minimum and maximum values for a 32-bit signed
integer). However, before PHP 5.1.0 this range was limited from 01-01-1970 to
19-01-2038 on some systems (e.g. Windows). 5.1.0 Now issues the E_STRICT and
E_NOTICE time zone errors.

5.1.1 There are useful constants of standard date/time formats that can be
used to specify the {format} parameter.

|date| examples

<?php >
  // set the default timezone to use. Available since PHP 5.1
  date_default_timezone_set('UTC');
  
  
  // Prints something like: Monday
  echo date("l");
  
  // Prints something like: Monday 8th of August 2005 03:12:46 PM
  echo date('l jS \of F Y h:i:s A');
  
  // Prints: July 1, 2000 is on a Saturday
  echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));
  
  /* use the constants in the format parameter */
  // prints something like: Mon, 15 Aug 2005 15:12:46 UTC
  echo date(DATE_RFC822);
  
  // prints something like: 2000-07-01T00:00:00+00:00
  echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
?>





You can prevent a recognized character in the format string from being
expanded by escaping it with a preceding backslash. If the character with a
backslash is already a special sequence, you may need to also escape the
backslash. Escaping characters in |date|

<?php >
  // prints something like: Wednesday the 15th
  echo date("l \\t\h\e jS");
?>





It is possible to use |date| and |mktime| together to find dates in the future
or the past. |date| and |mktime| example

<?php >
  $tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
  $lastmonth = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
  $nextyear  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>



This can be more reliable than simply adding or subtracting the number of
seconds in a day or month to a timestamp because of daylight saving time.

Some examples of |date| formatting. Note that you should escape any other
characters, as any which currently have a special meaning will produce
undesirable results, and other characters may be assigned meaning in future
PHP versions. When escaping, be sure to use single quotes to prevent
characters like \n from becoming newlines. |date| Formatting

<?php >
  // Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the
  // Mountain Standard Time (MST) Time Zone
  
  $today = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
  $today = date("m.d.y");                         // 03.10.01
  $today = date("j, n, Y");                       // 10, 3, 2001
  $today = date("Ymd");                           // 20010310
  $today = date('h-i-s, j-m-y, it is w Day');     // 05-16-18, 10-03-01, 1631 1618 6 Satpm01
  $today = date('\i\t \i\s \t\h\e jS \d\a\y.');   // it is the 10th day.
  $today = date("D M j G:i:s T Y");               // Sat Mar 10 17:16:18 MST 2001
  $today = date('H:m:s \m \i\s\ \m\o\n\t\h');     // 17:03:18 m is month
  $today = date("H:i:s");                         // 17:16:18
?>





To format dates in other languages, you should use the |setlocale| and
|strftime| functions instead of |date|.

To generate a timestamp from a string representation of the date, you may be
able to use |strtotime|. Additionally, some databases have functions to
convert their date formats into timestamps (such as MySQL's UNIX_TIMESTAMP
function).

Timestamp of the start of the request is available in $_SERVER['REQUEST_TIME']
since PHP 5.1.

|gmdate| |idate| |getdate| |getlastmod| |mktime| |strftime| |time| Predefined
DateTime Constants

vim:ft=help:
