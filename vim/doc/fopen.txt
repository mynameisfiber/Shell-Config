*fopen* -- Opens file or URL

  resource fopen(string filename, string mode [, bool use_include_path [, resource context]])~

|fopen| binds a named resource, specified by {filename}, to a stream.

{filename} If {filename} is of the form "scheme://...", it is assumed to be a
URL and PHP will search for a protocol handler (also known as a wrapper) for
that scheme. If no wrappers for that protocol are registered, PHP will emit a
notice to help you track potential problems in your script and then continue
as though {filename} specifies a regular file.

If PHP has decided that {filename} specifies a local file, then it will try to
open a stream on that file. The file must be accessible to PHP, so you need to
ensure that the file access permissions allow this access. If you have enabled
safe mode, or open_basedir further restrictions may apply.

If PHP has decided that {filename} specifies a registered protocol, and that
protocol is registered as a network URL, PHP will check to make sure that
allow_url_fopen is enabled. If it is switched off, PHP will emit a warning and
the fopen call will fail.

The list of supported protocols can be found in . Some protocols (also
referred to as wrappers) support context and/or php.ini options. Refer to the
specific page for the protocol in use for a list of options which can be set.
(e.g. php.ini value user_agent used by the http wrapper).

On the Windows platform, be careful to escape any backslashes used in the path
to the file, or use forward slashes.

<?php >
  $handle = fopen("c:\\folder\\resource.txt", "r");
?>

{mode} The {mode} parameter specifies the type of access you require to the
stream. It may be any of the following: A list of possible modes for |fopen|
using {mode} {mode} Description 'r' Open for reading only; place the file
pointer at the beginning of the file. 'r+' Open for reading and writing; place
the file pointer at the beginning of the file. 'w' Open for writing only;
place the file pointer at the beginning of the file and truncate the file to
zero length. If the file does not exist, attempt to create it. 'w+' Open for
reading and writing; place the file pointer at the beginning of the file and
truncate the file to zero length. If the file does not exist, attempt to
create it. 'a' Open for writing only; place the file pointer at the end of the
file. If the file does not exist, attempt to create it. 'a+' Open for reading
and writing; place the file pointer at the end of the file. If the file does
not exist, attempt to create it. 'x' Create and open for writing only; place
the file pointer at the beginning of the file. If the file already exists, the
|fopen| call will fail by returning FALSE and generating an error of level
E_WARNING. If the file does not exist, attempt to create it. This is
equivalent to specifying O_EXCL|O_CREAT flags for the underlying open(2)
system call. 'x+' Create and open for reading and writing; otherwise it has
the same behavior as 'x'. 'c' Open the file for writing only. If the file does
not exist, it is created. If it exists, it is neither truncated (as opposed to
'w'), nor the call to this function fails (as is the case with 'x'). The file
pointer is positioned on the beginning of the file. This may be useful if it's
desired to get an advisory lock (see |flock|) before attempting to modify the
file, as using 'w' could truncate the file before the lock was obtained (if
truncation is desired, |ftruncate| can be used after the lock is requested).
'c+' Open the file for reading and writing; otherwise it has the same behavior
as 'c'.

Different operating system families have different line-ending conventions.
When you write a text file and want to insert a line break, you need to use
the correct line-ending character(s) for your operating system. Unix based
systems use \n as the line ending character, Windows based systems use \r\n as
the line ending characters and Macintosh based systems use \r as the line
ending character.

If you use the wrong line ending characters when writing your files, you might
find that other applications that open those files will "look funny".

Windows offers a text-mode translation flag ('t') which will transparently
translate \n to \r\n when working with the file. In contrast, you can also use
'b' to force binary mode, which will not translate your data. To use these
flags, specify either 'b' or 't' as the last character of the {mode}
parameter.

The default translation mode depends on the SAPI and version of PHP that you
are using, so you are encouraged to always specify the appropriate flag for
portability reasons. You should use the 't' mode if you are working with
plain-text files and you use \n to delimit your line endings in your script,
but expect your files to be readable with applications such as notepad. You
should use the 'b' in all other cases.

If you do not specify the 'b' flag when working with binary files, you may
experience strange problems with your data, including broken image files and
strange problems with \r\n characters.

For portability, it is strongly recommended that you always use the 'b' flag
when opening files with |fopen|.

Again, for portability, it is also strongly recommended that you re-write code
that uses or relies upon the 't' mode so that it uses the correct line endings
and 'b' mode instead.

{use_include_path} The optional third {use_include_path} parameter can be set
to '1' or TRUE if you want to search for the file in the include_path, too.

{context} Context support was added with PHP 5.0.0. For a description of
contexts, refer to .

Returns a file pointer resource on success, or FALSE on error.

If the open fails, an error of level E_WARNING is generated. You may use @ to
suppress this warning.

Version Description 4.3.2 As of PHP 4.3.2, the default mode is set to binary
for all platforms that distinguish between binary and text mode. If you are
having problems with your scripts after upgrading, try using the 't' flag as a
workaround until you have made your script more portable as mentioned before
4.3.2 The 'x' and 'x+' options were added 5.2.6 The 'c' and 'c+' options were
added

|fopen| examples

<?php >
  $handle = fopen("/home/rasmus/file.txt", "r");
  $handle = fopen("/home/rasmus/file.gif", "wb");
  $handle = fopen("http://www.example.com/", "r");
  $handle = fopen("ftp://user:password@example.com/somefile.txt", "w");
?>





When using SSL, Microsoft IIS will violate the protocol by closing the
connection without sending a close_notify indicator. PHP will report this as
"SSL: Fatal Protocol Error" when you reach the end of the data. To work around
this, the value of error_reporting should be lowered to a level that does not
include warnings. PHP 4.3.7 and higher can detect buggy IIS server software
when you open the stream using the https:// wrapper and will suppress the
warning. When using |fsockopen| to create an ssl:// socket, the developer is
responsible for detecting and suppressing this warning.

When safe mode is enabled, PHP checks whether the directory in which the
script is operating has the same UID (owner) as the script that is being
executed.

If you are experiencing problems with reading and writing to files and you're
using the server module version of PHP, remember to make sure that the files
and directories you're using are accessible to the server process.

|fclose| |fgets| |fread| |fwrite| |fsockopen| |file| |file_exists|
|is_readable| |stream_set_timeout| |popen| |stream_context_create|

vim:ft=help:
