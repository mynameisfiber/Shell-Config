*filter_var* -- Filters a variable with a specified filter

  mixed filter_var(mixed variable [, int filter [, mixed options]])~

{variable} Value to filter.

{filter} The ID of the filter to apply. The manual page lists the available
filters.

{options} Associative array of options or bitwise disjunction of flags. If
filter accepts options, flags can be provided in "flags" field of array. For
the "callback" filter, callback type should be passed. The callback must
accept one argument, the value to be filtered, and return the value after
filtering/sanitizing it.

<?php >
  // for filters that accept options, use this format
  $options = array(
      'options' => array(
          'default' => 3, // value to return if the filter fails
          // other options here
          'min_range' => 0
      ),
      'flags' => FILTER_FLAG_ALLOW_OCTAL,
  );
  $var = filter_var('0755', FILTER_VALIDATE_INT, $options);
  
  // for filter that only accept flags, you can pass them directly
  $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
  
  // for filter that only accept flags, you can also pass as an array
  $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN,
                    array('flags' => FILTER_NULL_ON_FAILURE));
  
  // callback filter
  function foo($value)
  {
      $ret = new stdClass;
      $ret->value = filter_var($value, FILTER_VALIDATE_BOOLEAN,
                               array('flags' => FILTER_NULL_ON_FAILURE));
      return $ret;
  }
  $var = filter_var('yes', FILTER_CALLBACK, array('options' => 'foo'));
?>

Returns the filtered data, or FALSE if the filter fails.

A |filter_var| example

<?php >
  var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
  var_dump(filter_var('example.com', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED));
?>

The above example will output:

  string(15) "bob@example.com"
  bool(false)



|filter_var_array| |filter_input| |filter_input_array| information about the
callback type

vim:ft=help:
