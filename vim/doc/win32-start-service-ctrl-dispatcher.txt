*win32_start_service_ctrl_dispatcher* -- Registers the script with the SCM, so
that it can act as the service with the given name

  mixed win32_start_service_ctrl_dispatcher(string name)~

When launched via the Service Control Manager, a service process is required
to "check-in" with it to establish service monitoring and communication
facilities. This function performs the check-in by spawning a thread to handle
the lower-level communication with the service control manager.

Once started, the service process should do 2 things. The first is to tell the
Service Control Manager that the service is running. This is achieved by
calling |win32_set_service_status| with the WIN32_SERVICE_RUNNING constant. If
you need to perform some lengthy process before the service is actually
running, then you can use the WIN32_SERVICE_START_PENDING constant. The second
is to continue to check-in with the service control manager so that it can
determine if it should terminate. This is achieved by periodically calling
|win32_get_last_control_message| and handling the return code appropriately.

{name} The short-name of the service, as registered by |win32_create_service|.

Returns TRUE on success, &false; if there is a problem with the parameters or
a Win32 Error Code on failure.

A |win32_start_service_ctrl_dispatcher| example Check if the service is runnig
under the SCM.

<?php >
  if (!win32_start_service_ctrl_dispatcher('dummyphp')) {
    die("I'm probably not running under the service control manager");
  }
  
  win32_set_service_status(WIN32_SERVICE_START_PENDING);
  
  // Some lengthy process to get this service up and running.
  
  win32_set_service_status(WIN32_SERVICE_RUNNING);
  
  while (WIN32_SERVICE_CONTROL_STOP != win32_get_last_control_message()) {
    # do some work here, trying not to take more than around 30 seconds
    # before coming back into the loop again
  }
?>



|win32_set_service_status| |win32_get_last_control_message| Win32 Error Codes

vim:ft=help:
