*pcntl_wait* -- Waits on or returns the status of a forked child

  int pcntl_wait(int status [, int options])~

The wait function suspends execution of the current process until a child has
exited, or until a signal is delivered whose action is to terminate the
current process or to call a signal handling function. If a child has already
exited by the time of the call (a so-called "zombie" process), the function
returns immediately. Any system resources used by the child are freed. Please
see your system's wait(2) man page for specific details as to how wait works
on your system.

This function is equivalent to calling |pcntl_waitpid| with a -1 {pid} and no
{options}.

{status} |pcntl_wait| will store status information in the {status} parameter
which can be evaluated using the following functions: |pcntl_wifexited|,
|pcntl_wifstopped|, |pcntl_wifsignaled|, |pcntl_wexitstatus|, |pcntl_wtermsig|
and |pcntl_wstopsig|.

{options} If wait3 is available on your system (mostly BSD-style systems), you
can provide the optional {options} parameter. If this parameter is not
provided, wait will be used for the system call. If wait3 is not available,
providing a value for {options } will have no effect. The value of {options }
is the value of zero or more of the following two constants OR'ed together:
Possible values for {options} WNOHANG Return immediately if no child has
exited. WUNTRACED Return for children which are stopped, and whose status has
not been reported.

|pcntl_wait| returns the process ID of the child which exited, -1 on error or
zero if WNOHANG was provided as an option (on wait3-available systems) and no
child was available.

|pcntl_fork| |pcntl_signal| |pcntl_wifexited| |pcntl_wifstopped|
|pcntl_wifsignaled| |pcntl_wexitstatus| |pcntl_wtermsig| |pcntl_wstopsig|
|pcntl_waitpid|

vim:ft=help:
