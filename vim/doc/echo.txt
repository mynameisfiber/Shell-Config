*echo* -- Output one or more strings

  void echo(string arg1 [, string ...])~

Outputs all parameters.

|echo| is not actually a function (it is a language construct), so you are not
required to use parentheses with it. |echo| (unlike some other language
constructs) does not behave like a function, so it cannot always be used in
the context of a function. Additionally, if you want to pass more than one
parameter to |echo|, the parameters must not be enclosed within parentheses.

|echo| also has a shortcut syntax, where you can immediately follow the
opening tag with an equals sign. This short syntax only works with the
short_open_tag configuration setting enabled.

  I have <?=$foo?> foo.

{arg1} The parameter to output.

{...}

No value is returned.

|echo| examples

<?php >
  echo "Hello World";
  
  echo "This spans
  multiple lines. The newlines will be
  output as well";
  
  echo "This spans\nmultiple lines. The newlines will be\noutput as well.";
  
  echo "Escaping characters is done \"Like this\".";
  
  // You can use variables inside of an echo statement
  $foo = "foobar";
  $bar = "barbaz";
  
  echo "foo is $foo"; // foo is foobar
  
  // You can also use arrays
  $baz = array("value" => "foo");
  
  echo "this is {$baz['value']} !"; // this is foo !
  
  // Using single quotes will print the variable name, not the value
  echo 'foo is $foo'; // foo is $foo
  
  // If you are not using any other characters, you can just echo variables
  echo $foo;          // foobar
  echo $foo,$bar;     // foobarbarbaz
  
  // Some people prefer passing multiple parameters to echo over concatenation.
  echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);
  echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";
  
  echo <<<END
  This uses the "here document" syntax to output
  multiple lines with $variable interpolation. Note
  that the here document terminator must appear on a
  line with just a semicolon. no extra whitespace!
  END;
  
  // Because echo does not behave like a function, the following code is invalid.
  ($some_var) ? echo 'true' : echo 'false';
  
  // However, the following examples will work:
  ($some_var) ? print 'true' : print 'false'; // print is also a construct, but
                                              // it behaves like a function, so
                                              // it may be used in this context.
  echo $some_var ? 'true': 'false'; // changing the statement around
?>





Because this is a language construct and not a function, it cannot be called
using variable functions

|print| |printf| |flush| Heredoc syntax

vim:ft=help:
