*str_replace* -- Replace all occurrences of the search string with the
replacement string

  mixed str_replace(mixed search, mixed replace, mixed subject [, int count])~

This function returns a string or an array with all occurrences of {search} in
{subject} replaced with the given {replace} value.

If you don't need fancy replacing rules (like regular expressions), you should
always use this function instead of |ereg_replace| or |preg_replace|.

If {search} and {replace} are arrays, then |str_replace| takes a value from
each array and uses them to search and replace on {subject}. If {replace} has
fewer values than {search}, then an empty string is used for the rest of
replacement values. If {search} is an array and {replace} is a string, then
this replacement string is used for every value of {search}. The converse
would not make sense, though.

If {search} or {replace} are arrays, their elements are processed first to
last.

{search} The value being searched for, otherwise known as the needle. An array
may be used to designate multiple needles.

{replace} The replacement value that replaces found {search} values. An array
may be used to designate multiple replacements.

{subject} The string or array being searched and replaced on, otherwise known
as the haystack.

If {subject} is an array, then the search and replace is performed with every
entry of {subject}, and the return value is an array as well.

{count} If passed, this will be set to the number of replacements performed.

This function returns a string or an array with the replaced values.

Version Description 5.0.0 The {count} parameter was added. 4.3.3 The behaviour
of this function changed. In older versions a bug existed when using arrays as
both {search} and {replace} parameters which caused empty {search} indexes to
be skipped without advancing the internal pointer on the {replace} array. This
has been corrected in PHP 4.3.3, any scripts which relied on this bug should
remove empty search values prior to calling this function in order to mimic
the original behavior. 4.0.5 Most parameters can now be an array.

Basic |str_replace| examples

<?php >
  // Provides: <body text='black'>
  $bodytag = str_replace("%body%", "black", "<body text='%body%'>");
  
  // Provides: Hll Wrld f PHP
  $vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
  $onlyconsonants = str_replace($vowels, "", "Hello World of PHP");
  
  // Provides: You should eat pizza, beer, and ice cream every day
  $phrase  = "You should eat fruits, vegetables, and fiber every day.";
  $healthy = array("fruits", "vegetables", "fiber");
  $yummy   = array("pizza", "beer", "ice cream");
  
  $newphrase = str_replace($healthy, $yummy, $phrase);
  
  // Provides: 2
  $str = str_replace("ll", "", "good golly miss molly!", $count);
  echo $count;
?>





Examples of potential |str_replace| gotchas

<?php >
  // Order of replacement
  $str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
  $order   = array("\r\n", "\n", "\r");
  $replace = '<br />';
  
  // Processes \r\n's first so they aren't converted twice.
  $newstr = str_replace($order, $replace, $str);
  
  // Outputs F because A is replaced with B, then B is replaced with C, and so on...
  // Finally E is replaced with F, because of left to right replacements.
  $search  = array('A', 'B', 'C', 'D', 'E');
  $replace = array('B', 'C', 'D', 'E', 'F');
  $subject = 'A';
  echo str_replace($search, $replace, $subject);
  
  // Outputs: apearpearle pear
  // For the same reason mentioned above
  $letters = array('a', 'p');
  $fruit   = array('apple', 'pear');
  $text    = 'a p';
  $output  = str_replace($letters, $fruit, $text);
  echo $output;
?>





This function is binary-safe.

Because |str_replace| replaces left to right, it might replace a previously
inserted value when doing multiple replacements. See also the examples in this
document.

This function is case-sensitive. Use |str_ireplace| for case-insensitive
replace.

|str_ireplace| |substr_replace| |preg_replace| |strtr|

vim:ft=help:
