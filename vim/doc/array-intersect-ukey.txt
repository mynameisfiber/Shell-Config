*array_intersect_ukey* -- Computes the intersection of arrays using a callback
function on the keys for comparison

  array array_intersect_ukey(array array1, array array2 [, array ..., callback key_compare_func])~

|array_intersect_ukey| returns an array containing all the values of {array1}
which have matching keys that are present in all the arguments.

This comparison is done by a user supplied callback function. It must return
an integer less than, equal to, or greater than zero if the first key is
considered to be respectively less than, equal to, or greater than the second.

{array1} Initial array for comparison of the arrays.

{array2} First array to compare keys against.

{array} Variable list of array arguments to compare keys against.

{key_compare_func} User supplied callback function to do the comparison.

Returns the values of {array1} whose keys exist in all the arguments.

|array_intersect_ukey| example

<?php >
  function key_compare_func($key1, $key2)
  {
      if ($key1 == $key2)
          return 0;
      else if ($key1 > $key2)
          return 1;
      else
          return -1;
  }
  
  $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
  $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);
  
  var_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));
?>

The above example will output:

  array(2) {
    ["blue"]=>
    int(1)
    ["green"]=>
    int(3)
  }



In our example you see that only the keys 'blue' and 'green' are present in
both arrays and thus returned. Also notice that the values for the keys 'blue'
and 'green' differ between the two arrays. A match still occurs because only
the keys are checked. The values returned are those of {array1}.

|array_diff| |array_udiff| |array_diff_assoc| |array_diff_uassoc|
|array_udiff_assoc| |array_udiff_uassoc| |array_diff_key| |array_diff_ukey|
|array_intersect| |array_intersect_assoc| |array_intersect_uassoc|
|array_intersect_key|

vim:ft=help:
