*pack* -- Pack data into binary string

  string pack(string format [, mixed args [, mixed ...]])~

Pack given arguments into binary string according to {format}.

The idea for this function was taken from Perl and all formatting codes work
the same as in Perl. However, there are some formatting codes that are missing
such as Perl's "u" format code.

Note that the distinction between signed and unsigned values only affects the
function |unpack|, where as function |pack| gives the same result for signed
and unsigned format codes.

{format} The {format} string consists of format codes followed by an optional
repeater argument. The repeater argument can be either an integer value or *
for repeating to the end of the input data. For a, A, h, H the repeat count
specifies how many characters of one data argument are taken, for @ it is the
absolute position where to put the next data, for everything else the repeat
count specifies how many data arguments are consumed and packed into the
resulting binary string.

Currently implemented formats are: |pack| format characters Code Description a
NUL-padded string A SPACE-padded string h Hex string, low nibble first H Hex
string, high nibble first csigned char C unsigned char s signed short (always
16 bit, machine byte order) S unsigned short (always 16 bit, machine byte
order) n unsigned short (always 16 bit, big endian byte order) v unsigned
short (always 16 bit, little endian byte order) i signed integer (machine
dependent size and byte order) I unsigned integer (machine dependent size and
byte order) l signed long (always 32 bit, machine byte order) L unsigned long
(always 32 bit, machine byte order) N unsigned long (always 32 bit, big endian
byte order) V unsigned long (always 32 bit, little endian byte order) f float
(machine dependent size and representation) d double (machine dependent size
and representation) x NUL byte X Back up one byte @ NUL-fill to absolute
position

{args}

Returns a binary string containing data.

|pack| example

<?php >
  $binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>

The resulting binary string will be 6 bytes long and contain the byte sequence
0x12, 0x34, 0x78, 0x56, 0x41, 0x42.





Note that PHP internally stores integer values as signed values of a
machine-dependent size (C type long). Integer literals and operations that
yield numbers outside the bounds of the integer type will be stored as float.
When packing these floats as integers, they are first cast into the integer
type. This may or may not result in the desired byte pattern.

The most relevant case is when packing unsigned numbers that would be
representable with the integer type if it were unsigned. In systems where the
integer type has a 32-bit size, the cast usually results in the same byte
pattern as if the integer were unsigned (although this relies on
implementation-defined unsigned to signed conversions, as per the C standard).
In systems where the integer type has 64-bit size, the float most likely does
not have a mantissa large enough to hold the value without loss of precision.
If those systems also have a native 64-bit C int type (most UNIX-like systems
don't), the only way to use the I pack format in the upper range is to create
integer negative values with the same byte representation as the desired
unsigned value.

|unpack|

vim:ft=help:
