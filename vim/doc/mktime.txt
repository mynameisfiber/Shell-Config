*mktime* -- Get Unix timestamp for a date

  int mktime([int hour [, int minute [, int second [, int month [, int day [, int year [, int is_dst]]]]]]])~

Returns the Unix timestamp corresponding to the arguments given. This
timestamp is a long integer containing the number of seconds between the Unix
Epoch (January 1 1970 00:00:00 GMT) and the time specified.

Arguments may be left out in order from right to left; any arguments thus
omitted will be set to the current value according to the local date and time.

As of PHP 5.1, when called with no arguments, |mktime| throws an E_STRICT
notice: use the |time| function instead.

{hour} The number of the hour relevant to the start of the day determined by
{month}, {day} and {year}. Negative values reference the hour before midnight
of the day in question. Values greater than 23 reference the appropriate hour
in the following day(s).

{minute} The number of the minute relevant to the start of the {hour}.
Negative values reference the minute in the previous hour. Values greater than
59 reference the appropriate minute in the following hour(s).

{second} The number of seconds relevant to the start of the {minute}. Negative
values reference the second in the previous minute. Values greater than 59
reference the appropriate second in the following minute(s).

{month} The number of the month relevant to the end of the previous year.
Values 1 to 12 reference the normal calendar months of the year in question.
Values less than 1 (including negative values) reference the months in the
previous year in reverse order, so 0 is December, -1 is November, etc. Values
greater than 12 reference the appropriate month in the following year(s).

{day} The number of the day relevant to the end of the previous month. Values
1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in
the relevant month. Values less than 1 (including negative values) reference
the days in the previous month, so 0 is the last day of the previous month, -1
is the day before that, etc. Values greater than the number of days in the
relevant month reference the appropriate day in the following month(s).

{year} The number of the year, may be a two or four digit value, with values
between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. On systems where
time_t is a 32bit signed integer, as most common today, the valid range for
{year} is somewhere between 1901 and 2038. However, before PHP 5.1.0 this
range was limited from 1970 to 2038 on some systems (e.g. Windows).

{is_dst} This parameter can be set to 1 if the time is during daylight savings
time (DST), 0 if it is not, or -1 (the default) if it is unknown whether the
time is within daylight savings time or not. If it's unknown, PHP tries to
figure it out itself. This can cause unexpected (but not incorrect) results.
Some times are invalid if DST is enabled on the system PHP is running on or
{is_dst} is set to 1. If DST is enabled in e.g. 2:00, all times between 2:00
and 3:00 are invalid and |mktime| returns an undefined (usually negative)
value. Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of
the day when DST is enabled is evaluated as 23:30 of the previous day.

As of PHP 5.1.0, this parameter became deprecated. As a result, the new
timezone handling features should be used instead.

|mktime| returns the Unix timestamp of the arguments given. If the arguments
are invalid, the function returns FALSE (before PHP 5.1 it returned -1).

Every call to a date/time function will generate a E_NOTICE if the time zone
is not valid, and/or a E_STRICT or E_WARNING message if using the system
settings or the TZ environment variable. See also |date_default_timezone_set|

Version Description 5.3.0 |mktime| now throws E_DEPRECATED notice if the
{is_dst} parameter is used. 5.1.0 The {is_dst} parameter became deprecated.
Made the function return FALSE on error, instead of -1. Fixed the function to
accept the year, month and day to be all passed as zero. 5.1.0 When called
with no arguments, |mktime| throws E_STRICT notice. Use the |time| function
instead. 5.1.0 Now issues the E_STRICT and E_NOTICE time zone errors.

|mktime| basic example

<?php >
  // Set the default timezone to use. Available as of PHP 5.1
  date_default_timezone_set('UTC');
  
  // Prints: July 1, 2000 is on a Saturday
  echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));
  
  // Prints something like: 2006-04-05T01:02:03+00:00
  echo date('c', mktime(1, 2, 3, 4, 5, 2006));
?>





|mktime| example |mktime| is useful for doing date arithmetic and validation,
as it will automatically calculate the correct value for out-of-range input.
For example, each of the following lines produces the string "Jan-01-1998".

<?php >
  echo date("M-d-Y", mktime(0, 0, 0, 12, 32, 1997));
  echo date("M-d-Y", mktime(0, 0, 0, 13, 1, 1997));
  echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 1998));
  echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 98));
?>



Last day of next month The last day of any given month can be expressed as the
"0" day of the next month, not the -1 day. Both of the following examples will
produce the string "The last day in Feb 2000 is: 29".

<?php >
  $lastday = mktime(0, 0, 0, 3, 0, 2000);
  echo strftime("Last day in Feb 2000 is: %d", $lastday);
  $lastday = mktime(0, 0, 0, 4, -31, 2000);
  echo strftime("Last day in Feb 2000 is: %d", $lastday);
?>



Before PHP 5.1.0, negative timestamps were not supported under any known
version of Windows and some other systems as well. Therefore the range of
valid years was limited to 1970 through 2038.

|checkdate| |gmmktime| |date| |time|

vim:ft=help:
