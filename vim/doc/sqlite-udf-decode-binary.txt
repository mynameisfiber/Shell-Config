*sqlite_udf_decode_binary* -- Decode binary data passed as parameters to an UDF

  string sqlite_udf_decode_binary(string data)~

Decodes binary data passed as parameters to a UDF.

You must call this function on parameters passed to your UDF if you need them
to handle binary data, as the binary encoding employed by PHP will obscure the
content and of the parameter in its natural, non-coded form.

PHP does not perform this encode/decode operation automatically as it would
severely impact performance if it did.

{data} The encoded data that will be decoded, data that was applied by either
|sqlite_udf_encode_binary| or |sqlite_escape_string|.

The decoded string.

binary-safe max_length aggregation function example

<?php >
  $data = array(
     'one',
     'two',
     'three',
     'four',
     'five',
     'six',
     'seven',
     'eight',
     'nine',
     'ten',
     );
  $db = sqlite_open(':memory:');
  sqlite_query($db, "CREATE TABLE strings(a)");
  foreach ($data as $str) {
      $str = sqlite_escape_string($str);
      sqlite_query($db, "INSERT INTO strings VALUES ('$str')");
  }
  
  function max_len_step(&amp;$context, $string) 
  {
      $string = sqlite_udf_decode_binary($string);
      if (strlen($string) > $context) {
          $context = strlen($string);
      }
  }
  
  function max_len_finalize(&amp;$context) 
  {
      return $context;
  }
  
  sqlite_create_aggregate($db, 'max_len', 'max_len_step', 'max_len_finalize');
  
  var_dump(sqlite_array_query($db, 'SELECT max_len(a) from strings'));
?>





|sqlite_udf_encode_binary| |sqlite_create_function| |sqlite_create_aggregate|

vim:ft=help:
