*getopt* -- Gets options from the command line argument list

  array getopt(string options [, array longopts])~

Parses options passed to the script.

{options} Each character in this string will be used as option characters and
matched against options passed to the script starting with a single hyphen
(-).

For example, an option string "x" recognizes an option -x.

Only a-z, A-Z and 0-9 are allowed.

{longopts} An array of options. Each element in this array will be used as
option strings and matched against options passed to the script starting with
two hyphens (--).

For example, an longopts element "opt" recognizes an option --opt.

Prior to PHP5.3.0 this parameter was only available on few systems

The {options} parameter may contain the following elements: Individual
characters (do not accept values) Characters followed by a colon (parameter
requires value) Characters followed by two colons (optional value) Option
values are the first argument after the string. It does not matter if a value
has leading white space or not. Optional values do not accept " " (space) as a
separator.

The format for the {options} and {longopts} is almost the same, the only
difference is that {longopts} takes an array of options (where each element is
the option) where as {options} takes a string (where each character is the
option).

This function will return an array of option / argument pairs or FALSE on
failure.

The parsing of options will end at the first non-option found, anything that
follows is discarded.

Version Description 5.3.0 Added support for "=" as argument/value separator.
5.3.0 Added support for optional values (specified with "::"). 5.3.0 This
function is no longer system dependent and works on Windows too.

|getopt| example

<?php >
  $options = getopt("f:hp:");
  var_dump($options);
?>

Running the above script with php script.php -fvalue -h will output:

  array(2) {
    ["f"]=>
    string(5) "value"
    ["h"]=>
    bool(false)
  }



|getopt| example#2

<?php >
  $shortopts  = "";
  $shortopts .= "f:";  // Required value
  $shortopts .= "v::"; // Optional value
  $shortopts .= "abc"; // These options do not accept values
  
  $longopts  = array(
      "required:",     // Required value
      "optional::",    // Optional value
      "option",        // No value
      "opt",           // No value
  );
  $options = getopt($shortopts, $longopts);
  var_dump($options);
?>

Running the above script with php script.php -f "value for f" -v -a --required
value --optional="optional value" --option will output:

  array(6) {
    ["f"]=>
    string(11) "value for f"
    ["v"]=>
    bool(false)
    ["a"]=>
    bool(false)
    ["required"]=>
    string(5) "value"
    ["optional"]=>
    string(14) "optional value"
    ["option"]=>
    bool(false)
  }



|getopt| example#3 Passing multiple options as one

<?php >
  $options = getopt("abc");
  var_dump($options);
?>

Running the above script with php script.php -aaac will output:

  array(2) {
    ["a"]=>
    array(3) {
      [0]=>
      bool(false)
      [1]=>
      bool(false)
      [2]=>
      bool(false)
    }
    ["c"]=>
    bool(false)
  }



vim:ft=help:
