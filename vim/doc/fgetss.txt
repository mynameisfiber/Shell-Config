*fgetss* -- Gets line from file pointer and strip HTML tags

  string fgetss(resource handle [, int length [, string allowable_tags]])~

Identical to |fgets|, except that |fgetss| attempts to strip any NUL bytes,
HTML and PHP tags from the text it reads.

{handle} The file pointer must be valid, and must point to a file successfully
opened by |fopen| or |fsockopen| (and not yet closed by |fclose|).

{length} Length of the data to be retrieved.

{allowable_tags} You can use the optional third parameter to specify tags
which should not be stripped.

Returns a string of up to {length} - 1 bytes read from the file pointed to by
{handle}, with all HTML and PHP code stripped.

If an error occurs, returns FALSE.

Version Description 5.0.0 The {length} parameter is optional

Reading a PHP file line-by-line

<?php >
  $str = <<<EOD
  <html><body>
   <p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.</p>
  </body></html>
  Text outside of the HTML block.
  EOD;
  file_put_contents('sample.php', $str);
  
  $handle = @fopen("sample.php", "r");
  if ($handle) {
      while (!feof($handle)) {
          $buffer = fgetss($handle, 4096);
          echo $buffer;
      }
      fclose($handle);
  }
?>

The above example will output something similar to:

  Welcome! Today is the  of .
  
  Text outside of the HTML block.



If PHP is not properly recognizing the line endings when reading files either
on or created by a Macintosh computer, enabling the auto_detect_line_endings
run-time configuration option may help resolve the problem.

|fgets| |fopen| |popen| |fsockopen| |strip_tags|

vim:ft=help:
