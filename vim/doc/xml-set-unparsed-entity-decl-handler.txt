*xml_set_unparsed_entity_decl_handler* -- Set up unparsed entity declaration
handler

  bool xml_set_unparsed_entity_decl_handler(resource parser, callback handler)~

Sets the unparsed entity declaration handler function for the XML parser
{parser}.

The {handler} will be called if the XML parser encounters an external entity
declaration with an NDATA declaration, like the following:

  <!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter> | <parameter>systemId</parameter>}
          NDATA <parameter>notationName</parameter>



See section 4.2.2 of the XML 1.0 spec for the definition of notation declared
external entities.

{parser} A reference to the XML parser to set up unparsed entity declaration
handler function.

{handler} {handler} is a string containing the name of a function that must
exist when |xml_parse| is called for {parser}.

  bool (resource parser, callback handler, resource parser, string entity_name, string base, string system_id, string public_id, string notation_name)~

The function named by {handler} must accept six parameters: {parser} The first
parameter, parser, is a reference to the XML parser calling the handler.

{entity_name} The name of the entity that is about to be defined.

{base} This is the base for resolving the system identifier ({systemId}) of
the external entity.Currently this parameter will always be set to an empty
string.

{system_id} System identifier for the external entity.

{public_id} Public identifier for the external entity.

{notation_name} Name of the notation of this entity (see
|xml_set_notation_decl_handler|).

If a handler function is set to an empty string, or FALSE, the handler in
question is disabled.

Instead of a function name, an array containing an object reference and a
method name can also be supplied.

Returns TRUE on success or &false; on failure.

vim:ft=help:
