*openssl_seal* -- Seal (encrypt) data

  int openssl_seal(string data, string sealed_data, array env_keys, array pub_key_ids [, string method])~

|openssl_seal| seals (encrypts) {data} by using RC4 with a randomly generated
secret key. The key is encrypted with each of the public keys associated with
the identifiers in {pub_key_ids} and each encrypted key is returned in
{env_keys}. This means that one can send sealed data to multiple recipients
(provided one has obtained their public keys). Each recipient must receive
both the sealed data and the envelope key that was encrypted with the
recipient's public key.

{data}

{sealed_data}

{env_keys}

{pub_key_ids}

Returns the length of the sealed data on success, or FALSE on error. If
successful the sealed data is returned in {sealed_data}, and the envelope keys
in {env_keys}.

|openssl_seal| example

<?php >
  // $data is assumed to contain the data to be sealed
  
  // fetch public keys for our recipients, and ready them
  $fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
  $cert = fread($fp, 8192);
  fclose($fp);
  $pk1 = openssl_get_publickey($cert);
  // Repeat for second recipient
  $fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
  $cert = fread($fp, 8192);
  fclose($fp);
  $pk2 = openssl_get_publickey($cert);
  
  // seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys
  // $ekeys[0] and $ekeys[1] respectively.
  openssl_seal($data, $sealed, $ekeys, array($pk1, $pk2));
  
  // free the keys from memory
  openssl_free_key($pk1);
  openssl_free_key($pk2);
?>





|openssl_open|

vim:ft=help:
