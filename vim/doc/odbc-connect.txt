*odbc_connect* -- Connect to a datasource

  resource odbc_connect(string dsn, string user, string password [, int cursor_type])~

The connection id returned by this functions is needed by other ODBC
functions. You can have multiple connections open at once as long as they
either use different db or different credentials.

With some ODBC drivers, executing a complex stored procedure may fail with an
error similar to: "Cannot open a cursor on a stored procedure that has
anything other than a single select statement in it". Using SQL_CUR_USE_ODBC
may avoid that error. Also, some drivers don't support the optional row_number
parameter in |odbc_fetch_row|. SQL_CUR_USE_ODBC might help in that case, too.

{dsn} The database source name for the connection. Alternatively, a DSN-less
connection string can be used.

{user} The username.

{password} The password.

{cursor_type} This sets the type of cursor to be used for this connection.
This parameter is not normally needed, but can be useful for working around
problems with some ODBC drivers.

The following constants are defined for cursortype:

SQL_CUR_USE_IF_NEEDED

SQL_CUR_USE_ODBC

SQL_CUR_USE_DRIVER

Returns an ODBC connection id or 0 (FALSE) on error.

DSN-less connections

<?php >
  // Microsoft SQL Server using the SQL Native Client 10.0 ODBC Driver - allows connection to SQL 7, 2000, 2005 and 2008
  $connection = odbc_connect("Driver={SQL Server Native Client 10.0};Server=$server;Database=$database;", $user, $password);
  
  // Microsoft Access
  $connection = odbc_connect("Driver={Microsoft Access Driver (*.mdb)};Dbq=$mdbFilename", $user, $password);
  
  // Microsoft Excel
  $excelFile = realpath('C:/ExcelData.xls');
  $excelDir = dirname($excelFile);
  $connection = odbc_connect("Driver={Microsoft Excel Driver (*.xls)};DriverId=790;Dbq=$excelFile;DefaultDir=$excelDir" , '', '');
?>





For persistent connections: |odbc_pconnect|

vim:ft=help:
