*maxdb_result::fetch_array* -- Fetch a result row as an associative, a numeric
array, or both

Procedural style

  mixed maxdb_fetch_array(resource result [, int resulttype])~

Object oriented style

  mixed maxdb_result::fetch_array(resource result [, int resulttype [, int resulttype]])~

Returns an array that corresponds to the fetched row or NULL if there are no
more rows for the resultset represented by the {result} parameter.

|maxdb_fetch_array| is an extended version of the |maxdb_fetch_row| function.
In addition to storing the data in the numeric indices of the result array,
the |maxdb_fetch_array| function can also store the data in associative
indices, using the field names of the result set as keys.

Field names returned by this function are case-sensitive.

This function sets NULL fields to the PHP NULL value.

If two or more columns of the result have the same field names, the last
column will take precedence and overwrite the earlier data. In order to access
multiple columns with the same name, the numerically indexed version of the
row must be used.

The optional second argument {resulttype} is a constant indicating what type
of array should be produced from the current row data. The possible values for
this parameter are the constants MAXDB_ASSOC, MAXDB_ASSOC_UPPER,
MAXDB_ASSOC_LOWER, MAXDB_NUM, or MAXDB_BOTH. By default the
|maxdb_fetch_array| function will assume MAXDB_BOTH, which is a combination of
MAXDB_NUM and MAXDB_ASSOC for this parameter.

By using the MAXDB_ASSOC constant this function will behave identically to the
|maxdb_fetch_assoc|, while MAXDB_NUM will behave identically to the
|maxdb_fetch_row| function. The final option MAXDB_BOTH will create a single
array with the attributes of both.

By using the MAXDB_ASSOC_UPPER constant, the behaviour of this function is
identical to the use of MAXDB_ASSOC except the array index of a column is the
fieldname in upper case.

By using the MAXDB_ASSOC_LOWER constant, the behaviour of this function is
identical to the use of MAXDB_ASSOC except the array index of a column is the
fieldname in lower case.

Returns an array that corresponds to the fetched row or NULL if there are no
more rows in resultset.

Object oriented style

<?php >
  $maxdb = new maxdb("localhost", "MONA", "RED", "DEMODB");
  
  /* check connection */
  if (maxdb_connect_errno()) {
     printf("Connect failed: %s\n", maxdb_connect_error());
     exit();
  }
  
  $query = "SELECT name, state FROM hotel.city ORDER by zip";
  $result = $maxdb->query($query);
  
  /* numeric array */
  $row = $result->fetch_array(MAXDB_NUM);
  printf ("%s (%s)\n", $row[0], $row[1]);
  
  /* associative array */
  $row = $result->fetch_array(MAXDB_ASSOC);
  printf ("%s (%s)\n", $row["NAME"], $row["STATE"]);
  
  /* associative and numeric array */
  $row = $result->fetch_array(MAXDB_BOTH);
  printf ("%s (%s)\n", $row[0], $row["STATE"]);
  
  /* free result set */
  $result->close();
  
  /* close connection */
  $maxdb->close();
?>



Procedural style

<?php >
  $link = maxdb_connect("localhost", "MONA", "RED", "DEMODB");
  
  /* check connection */
  if (maxdb_connect_errno()) {
     printf("Connect failed: %s\n", maxdb_connect_error());
     exit();
  }
  
  $query = "SELECT name, state FROM hotel.city ORDER by zip";
  $result = maxdb_query($link, $query);
  
  /* numeric array */
  $row = maxdb_fetch_array($result, MAXDB_NUM);
  printf ("%s (%s)\n", $row[0], $row[1]);
  
  /* associative array */
  $row = maxdb_fetch_array($result, MAXDB_ASSOC);
  printf ("%s (%s)\n", $row["NAME"], $row["STATE"]);
  
  /* associative and numeric array */
  $row = maxdb_fetch_array($result, MAXDB_BOTH);
  printf ("%s (%s)\n", $row[0], $row["STATE"]);
  
  /* free result set */
  maxdb_free_result($result);
  
  /* close connection */
  maxdb_close($link);
?>



The above example will output something similar to:



  New York (NY)
  New York (NY)
  Long Island (NY)

|maxdb_fetch_assoc| |maxdb_fetch_row| |maxdb_fetch_resource|

vim:ft=help:
