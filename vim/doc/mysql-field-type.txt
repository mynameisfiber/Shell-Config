*mysql_field_type* -- Get the type of the specified field in a result

  string mysql_field_type(resource result, int field_offset)~

|mysql_field_type| is similar to the |mysql_field_name| function. The
arguments are identical, but the field type is returned instead.

{ result}The result resource that is being evaluated. This result comes from a
call to |mysql_query|.

{ field_offset}The numerical field offset. The {field_offset} starts at 0. If
{field_offset} does not exist, an error of level E_WARNING is also issued.

The returned field type will be one of "int", "real", "string", "blob", and
others as detailed in the MySQL documentation.

|mysql_field_type| example

<?php >
  mysql_connect("localhost", "mysql_username", "mysql_password");
  mysql_select_db("mysql");
  $result = mysql_query("SELECT * FROM func");
  $fields = mysql_num_fields($result);
  $rows   = mysql_num_rows($result);
  $table  = mysql_field_table($result, 0);
  echo "Your '" . $table . "' table has " . $fields . " fields and " . $rows . " record(s)\n";
  echo "The table has the following fields:\n";
  for ($i=0; $i < $fields; $i++) {
      $type  = mysql_field_type($result, $i);
      $name  = mysql_field_name($result, $i);
      $len   = mysql_field_len($result, $i);
      $flags = mysql_field_flags($result, $i);
      echo $type . " " . $name . " " . $len . " " . $flags . "\n";
  }
  mysql_free_result($result);
  mysql_close();
?>

The above example will output something similar to:

  Your 'func' table has 4 fields and 1 record(s)
  The table has the following fields:
  string name 64 not_null primary_key binary
  int ret 1 not_null
  string dl 128 not_null
  string type 9 not_null enum



For backward compatibility, the following deprecated alias may be used:
|mysql_fieldtype|

|mysql_field_name| |mysql_field_len|

vim:ft=help:
