*array_map* -- Applies the callback to the elements of the given arrays

  array array_map(callback callback, array arr1 [, array ...])~

|array_map| returns an array containing all the elements of {arr1} after
applying the {callback} function to each one. The number of parameters that
the {callback} function accepts should match the number of arrays passed to
the |array_map|

{callback} Callback function to run for each element in each array.

{arr1} An array to run through the {callback} function.

{array} Variable list of array arguments to run through the {callback}
function.

Returns an array containing all the elements of {arr1} after applying the
{callback} function to each one.

|array_map| example

<?php >
  function cube($n)
  {
      return($n * $n * $n);
  }
  
  $a = array(1, 2, 3, 4, 5);
  $b = array_map("cube", $a);
  print_r($b);
?>

This makes $b have:

  Array
  (
      [0] => 1
      [1] => 8
      [2] => 27
      [3] => 64
      [4] => 125
  )



|array_map| using a lambda function (as of PHP 5.3.0)

<?php >
  $func = function($value) {
      return $value * 2;
  };
  
  print_r(array_map($func, range(1, 5)));
?>

  Array
  (
      [0] => 2
      [1] => 4
      [2] => 6
      [3] => 8
      [4] => 10
  )



|array_map| - using more arrays

<?php >
  function show_Spanish($n, $m)
  {
      return("The number $n is called $m in Spanish");
  }
  
  function map_Spanish($n, $m)
  {
      return(array($n => $m));
  }
  
  $a = array(1, 2, 3, 4, 5);
  $b = array("uno", "dos", "tres", "cuatro", "cinco");
  
  $c = array_map("show_Spanish", $a, $b);
  print_r($c);
  
  $d = array_map("map_Spanish", $a , $b);
  print_r($d);
?>

The above example will output:

  // printout of $c
  Array
  (
      [0] => The number 1 is called uno in Spanish
      [1] => The number 2 is called dos in Spanish
      [2] => The number 3 is called tres in Spanish
      [3] => The number 4 is called cuatro in Spanish
      [4] => The number 5 is called cinco in Spanish
  )
  
  // printout of $d
  Array
  (
      [0] => Array
          (
              [1] => uno
          )
  
      [1] => Array
          (
              [2] => dos
          )
  
      [2] => Array
          (
              [3] => tres
          )
  
      [3] => Array
          (
              [4] => cuatro
          )
  
      [4] => Array
          (
              [5] => cinco
          )
  
  )



Usually when using two or more arrays, they should be of equal length because
the callback function is applied in parallel to the corresponding elements. If
the arrays are of unequal length, the shortest one will be extended with empty
elements.

An interesting use of this function is to construct an array of arrays, which
can be easily performed by using NULL as the name of the callback function

Creating an array of arrays

<?php >
  $a = array(1, 2, 3, 4, 5);
  $b = array("one", "two", "three", "four", "five");
  $c = array("uno", "dos", "tres", "cuatro", "cinco");
  
  $d = array_map(null, $a, $b, $c);
  print_r($d);
?>

The above example will output:

  Array
  (
      [0] => Array
          (
              [0] => 1
              [1] => one
              [2] => uno
          )
  
      [1] => Array
          (
              [0] => 2
              [1] => two
              [2] => dos
          )
  
      [2] => Array
          (
              [0] => 3
              [1] => three
              [2] => tres
          )
  
      [3] => Array
          (
              [0] => 4
              [1] => four
              [2] => cuatro
          )
  
      [4] => Array
          (
              [0] => 5
              [1] => five
              [2] => cinco
          )
  
  )



If the array argument contains string keys then the returned array will
contain string keys if and only if exactly one array is passed. If more than
one argument is passed then the returned array always has integer keys.

|array_map| - with string keys

<?php >
  $arr = array("stringkey" => "value");
  function cb1($a) {
      return array ($a);
  }
  function cb2($a, $b) {
      return array ($a, $b);
  }
  var_dump(array_map("cb1", $arr));
  var_dump(array_map("cb2", $arr, $arr));
  var_dump(array_map(null,  $arr));
  var_dump(array_map(null, $arr, $arr));
?>

The above example will output:

  array(1) {
    ["stringkey"]=>
    array(1) {
      [0]=>
      string(5) "value"
    }
  }
  array(1) {
    [0]=>
    array(2) {
      [0]=>
      string(5) "value"
      [1]=>
      string(5) "value"
    }
  }
  array(1) {
    ["stringkey"]=>
    string(5) "value"
  }
  array(1) {
    [0]=>
    array(2) {
      [0]=>
      string(5) "value"
      [1]=>
      string(5) "value"
    }
  }



|array_filter| |array_reduce| |array_walk| |create_function| information about
the callback type

vim:ft=help:
