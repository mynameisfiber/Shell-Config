*stream_socket_enable_crypto* -- Turns encryption on/off on an already connected
socket

  mixed stream_socket_enable_crypto(resource stream, bool enable [, int crypto_type [, resource session_stream]])~

Enable or disable encryption on the stream.

Once the crypto settings are established, cryptography can be turned on and
off dynamically by passing TRUE or FALSE in the {enable} parameter.

{stream} The stream resource.

{enable} Enable/disable cryptography on the stream.

{crypto_type} Setup encryption on the stream. Valid methods are
STREAM_CRYPTO_METHOD_SSLv2_CLIENT

STREAM_CRYPTO_METHOD_SSLv3_CLIENT

STREAM_CRYPTO_METHOD_SSLv23_CLIENT

STREAM_CRYPTO_METHOD_TLS_CLIENT

STREAM_CRYPTO_METHOD_SSLv2_SERVER

STREAM_CRYPTO_METHOD_SSLv3_SERVER

STREAM_CRYPTO_METHOD_SSLv23_SERVER

STREAM_CRYPTO_METHOD_TLS_SERVER

{session_stream} Seed the stream with settings from {session_stream}.

Returns TRUE on success, FALSE if negotiation has failed or 0 if there isn't
enough data and you should try again (only for non-blocking sockets).

|stream_socket_enable_crypto| example

<?php >
  $fp = stream_socket_client("tcp://myproto.example.com:31337", $errno, $errstr, 30);
  if (!$fp) {
      die("Unable to connect: $errstr ($errno)");
  }
  
  /* Turn on encryption for login phase */
  stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_SSLv23_CLIENT);
  fwrite($fp, "USER god\r\n");
  fwrite($fp, "PASS secret\r\n");
  
  /* Turn off encryption for the rest */
  stream_socket_enable_crypto($fp, false);
  
  while ($motd = fgets($fp)) {
      echo $motd;
  }
  
  fclose($fp);
?>

The above example will output something similar to:

  



vim:ft=help:
