*array_slice* -- Extract a slice of the array

  array array_slice(array array, int offset [, int length [, bool preserve_keys]])~

|array_slice| returns the sequence of elements from the array {array} as
specified by the {offset} and {length} parameters.

This function will |reset| the array pointer after use.

{array} The input array.

{offset} If {offset} is non-negative, the sequence will start at that offset
in the {array}. If {offset} is negative, the sequence will start that far from
the end of the {array}.

{length} If {length} is given and is positive, then the sequence will have
that many elements in it. If {length} is given and is negative then the
sequence will stop that many elements from the end of the array. If it is
omitted, then the sequence will have everything from {offset} up until the end
of the {array}.

{preserve_keys} Note that |array_slice| will reorder and reset the array
indices by default. You can change this behaviour by setting {preserve_keys}
to TRUE.

Returns the slice.

Version Description 5.0.2 The optional {preserve_keys} parameter was added.

|array_slice| examples

<?php >
  $input = array("a", "b", "c", "d", "e");
  
  $output = array_slice($input, 2);      // returns "c", "d", and "e"
  $output = array_slice($input, -2, 1);  // returns "d"
  $output = array_slice($input, 0, 3);   // returns "a", "b", and "c"
  
  // note the differences in the array keys
  print_r(array_slice($input, 2, -1));
  print_r(array_slice($input, 2, -1, true));
?>

The above example will output:

  Array
  (
      [0] => c
      [1] => d
  )
  Array
  (
      [2] => c
      [3] => d
  )



|array_splice| |unset|

vim:ft=help:
