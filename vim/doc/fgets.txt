*fgets* -- Gets line from file pointer

  string fgets(resource handle [, int length])~

Gets a line from file pointer.

{handle} The file pointer must be valid, and must point to a file successfully
opened by |fopen| or |fsockopen| (and not yet closed by |fclose|).

{length} Reading ends when {length} - 1 bytes have been read, on a newline
(which is included in the return value), or on EOF (whichever comes first). If
no length is specified, it will keep reading from the stream until it reaches
the end of the line.

Until PHP 4.3.0, omitting it would assume 1024 as the line length. If the
majority of the lines in the file are all larger than 8KB, it is more resource
efficient for your script to specify the maximum line length.

Returns a string of up to {length} - 1 bytes read from the file pointed to by
{handle}. If there is no more data to read in the file pointer, then FALSE is
returned.

If an error occurs, FALSE is returned.

Version Description 4.3.0 |fgets| is now binary safe 4.2.0 The {length}
parameter became optional

Reading a file line by line

<?php >
  $handle = @fopen("/tmp/inputfile.txt", "r");
  if ($handle) {
      while (($buffer = fgets($handle, 4096)) !== false) {
          echo $buffer;
      }
      if (!feof($handle)) {
          echo "Error: unexpected fgets() fail\n";
      }
      fclose($handle);
  }
?>





If PHP is not properly recognizing the line endings when reading files either
on or created by a Macintosh computer, enabling the auto_detect_line_endings
run-time configuration option may help resolve the problem.

People used to the 'C' semantics of |fgets| should note the difference in how
EOF is returned.

|fgetss| |fread| |fgetc| |stream_get_line| |fopen| |popen| |fsockopen|
|stream_set_timeout|

vim:ft=help:
