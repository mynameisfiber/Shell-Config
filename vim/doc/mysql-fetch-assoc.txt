*mysql_fetch_assoc* -- Fetch a result row as an associative array

  array mysql_fetch_assoc(resource result)~

Returns an associative array that corresponds to the fetched row and moves the
internal data pointer ahead. |mysql_fetch_assoc| is equivalent to calling
|mysql_fetch_array| with MYSQL_ASSOC for the optional second parameter. It
only returns an associative array.

{ result}The result resource that is being evaluated. This result comes from a
call to |mysql_query|.

Returns an associative array of strings that corresponds to the fetched row,
or FALSE if there are no more rows.

If two or more columns of the result have the same field names, the last
column will take precedence. To access the other column(s) of the same name,
you either need to access the result with numeric indices by using
|mysql_fetch_row| or add alias names. See the example at the
|mysql_fetch_array| description about aliases.

An expanded |mysql_fetch_assoc| example

<?php >
  $conn = mysql_connect("localhost", "mysql_user", "mysql_password");
  
  if (!$conn) {
      echo "Unable to connect to DB: " . mysql_error();
      exit;
  }
    
  if (!mysql_select_db("mydbname")) {
      echo "Unable to select mydbname: " . mysql_error();
      exit;
  }
  
  $sql = "SELECT id as userid, fullname, userstatus 
          FROM   sometable
          WHERE  userstatus = 1";
  
  $result = mysql_query($sql);
  
  if (!$result) {
      echo "Could not successfully run query ($sql) from DB: " . mysql_error();
      exit;
  }
  
  if (mysql_num_rows($result) == 0) {
      echo "No rows found, nothing to print so am exiting";
      exit;
  }
  
  // While a row of data exists, put that row in $row as an associative array
  // Note: If you're expecting just one row, no need to use a loop
  // Note: If you put extract($row); inside the following loop, you'll
  //       then create $userid, $fullname, and $userstatus
  while ($row = mysql_fetch_assoc($result)) {
      echo $row["userid"];
      echo $row["fullname"];
      echo $row["userstatus"];
  }
  
  mysql_free_result($result);
?>





An important thing to note is that using |mysql_fetch_assoc| is not
significantly slower than using |mysql_fetch_row|, while it provides a
significant added value.

Field names returned by this function are case-sensitive.

This function sets NULL fields to the PHP NULL value.

|mysql_fetch_row| |mysql_fetch_array| |mysql_data_seek| |mysql_query|
|mysql_error|

vim:ft=help:
