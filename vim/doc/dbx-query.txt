*dbx_query* -- Send a query and fetch all results (if any)

  mixed dbx_query(object link_identifier, string sql_statement [, int flags])~

Sends a query and fetch all results.

{link_identifier} The DBX link object returned by |dbx_connect|

{sql_statement} SQL statement.

Data inside the query should be properly escaped.

{flags} The {flags} parameter is used to control the amount of information
that is returned. It may be any combination of the following constants with
the bitwise OR operator (|). The DBX_COLNAMES_* flags override the
dbx.colnames_case setting from php.ini. DBX_RESULT_INDEX It is always set,
that is, the returned object has a data property which is a 2 dimensional
array indexed numerically. For example, in the expression data[2][3] 2 stands
for the row (or record) number and 3 stands for the column (or field) number.
The first row and column are indexed at 0.

If DBX_RESULT_ASSOC is also specified, the returning object contains the
information related to DBX_RESULT_INFO too, even if it was not specified.

DBX_RESULT_INFO It provides info about columns, such as field names and field
types.

DBX_RESULT_ASSOC It effects that the field values can be accessed with the
respective column names used as keys to the returned object's data property.

Associated results are actually references to the numerically indexed data, so
modifying data[0][0] causes that data[0]['field_name_for_first_column'] is
modified as well.

DBX_RESULT_UNBUFFERED This flag will not create the data property, and the
rows property will initially be 0. Use this flag for large datasets, and use
|dbx_fetch_row| to retrieve the results row by row.

The |dbx_fetch_row| function will return rows that are conformant to the flags
set with this query. Incidentally, it will also update the rows each time it
is called.

DBX_COLNAMES_UNCHANGED The case of the returned column names will not be
changed.

DBX_COLNAMES_UPPERCASE The case of the returned column names will be changed
to uppercase.

DBX_COLNAMES_LOWERCASE The case of the returned column names will be changed
to lowercase.

Note that DBX_RESULT_INDEX is always used, regardless of the actual value of
{flags} parameter. This means that only the following combinations are
effective: DBX_RESULT_INDEX

DBX_RESULT_INDEX | DBX_RESULT_INFO

DBX_RESULT_INDEX | DBX_RESULT_INFO | DBX_RESULT_ASSOC - this is the default,
if {flags} is not specified.

|dbx_query| returns an object or 1 on success, and 0 on failure. The result
object is returned only if the query given in {sql_statement} produces a
result set (i.e. a SELECT query, even if the result set is empty).

The returned object has four or five properties depending on {flags}: handle
It is a valid handle for the connected database, and as such it can be used in
module specific functions (if required).

<?php >
  $result = dbx_query($link, "SELECT id FROM table");
  mysql_field_len($result->handle, 0);
?>

cols and rows These contain the number of columns (or fields) and rows (or
records) respectively.

<?php >
  $result = dbx_query($link, 'SELECT id FROM table');
  echo $result->rows; // number of records
  echo $result->cols; // number of fields 
?>

info (optional) It is returned only if either DBX_RESULT_INFO or
DBX_RESULT_ASSOC is specified in the {flags} parameter. It is a 2 dimensional
array, that has two named rows (name and type) to retrieve column information.

lists each field's name and type

<?php >
  $result = dbx_query($link, 'SELECT id FROM table',
                       DBX_RESULT_INDEX | DBX_RESULT_INFO);
  
  for ($i = 0; $i < $result->cols; $i++ ) {
      echo $result->info['name'][$i] . "\n";
      echo $result->info['type'][$i] . "\n";  
  }
?>



data This property contains the actual resulting data, possibly associated
with column names as well depending on {flags}. If DBX_RESULT_ASSOC is set, it
is possible to use $result->data[2]["field_name"].

outputs the content of data property into HTML table

<?php >
  $result = dbx_query($link, 'SELECT id, parentid, description FROM table');
  
  echo "<table>\n";
  foreach ($result->data as $row) {
      echo "<tr>\n";
      foreach ($row as $field) {
          echo "<td>$field</td>";
      }
      echo "</tr>\n";
  }
  echo "</table>\n";
?>



How to handle UNBUFFERED queries

<?php >
  $result = dbx_query ($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);
  
  echo "<table>\n";
  while ($row = dbx_fetch_row($result)) {
      echo "<tr>\n";
      foreach ($row as $field) {
          echo "<td>$field</td>";
      }
      echo "</tr>\n";
  }
  echo "</table>\n";
?>



Version Description 5.0.0 Introduced DBX_RESULT_UNBUFFERED. 4.3.0 Introduced
DBX_COLNAMES_UNCHANGED, DBX_COLNAMES_UPPERCASE, and DBX_COLNAMES_LOWERCASE.

How to handle the returned value

<?php >
  $link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
      or die("Could not connect");
  
  $result = dbx_query($link, 'SELECT id, parentid, description FROM table');
  
  if (is_object($result) ) {
      // ... do some stuff here, see detailed examples below ...
      // first, print out field names and types 
      // then, draw a table filled with the returned field values
  } else {
      exit("Query failed");
  }
  
  dbx_close($link);
?>





Always refer to the module-specific documentation as well.

Column names for queries on an Oracle database are returned in lowercase.

|dbx_escape_string| |dbx_fetch_row| |dbx_connect|

vim:ft=help:
