*imagettfbbox* -- Give the bounding box of a text using TrueType fonts

  array imagettfbbox(float size, float angle, string fontfile, string text)~

This function calculates and returns the bounding box in pixels for a TrueType
text.

{size} The font size. Depending on your version of GD, this should be
specified as the pixel size (GD1) or point size (GD2).

{angle} Angle in degrees in which {text} will be measured.

{fontfile} The name of the TrueType font file (can be a URL). Depending on
which version of the GD library that PHP is using, it may attempt to search
for files that do not begin with a leading '/' by appending '.ttf' to the
filename and searching along a library-defined font path.

{text} The string to be measured.

|imagettfbbox| returns an array with 8 elements representing four points
making the bounding box of the text on success and FALSE on error. key
contents 0 lower left corner, X position 1 lower left corner, Y position 2
lower right corner, X position 3 lower right corner, Y position 4 upper right
corner, X position 5 upper right corner, Y position 6 upper left corner, X
position 7 upper left corner, Y position

The points are relative to the text regardless of the {angle}, so "upper left"
means in the top left-hand corner seeing the text horizontally.

|imagettfbbox| example

<?php >
  // Create a 300x150 image
  $im = imagecreatetruecolor(300, 150);
  $black = imagecolorallocate($im, 0, 0, 0);
  $white = imagecolorallocate($im, 255, 255, 255);
  
  // Set the background to be white
  imagefilledrectangle($im, 0, 0, 299, 299, $white);
  
  // Path to our font file
  $font = './arial.ttf';
  
  // First we create our bounding box for the first text
  $bbox = imagettfbbox(10, 45, $font, 'Powered by PHP ' . phpversion());
  
  // This is our cordinates for X and Y
  $x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 25;
  $y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;
  
  // Write it
  imagettftext($im, 10, 45, $x, $y, $black, $font, 'Powered by PHP ' . phpversion());
  
  // Create the next bounding box for the second text
  $bbox = imagettfbbox(10, 45, $font, 'and Zend Engine ' . zend_version());
  
  // Set the cordinates so its next to the first text
  $x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) + 10;
  $y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;
  
  // Write it
  imagettftext($im, 10, 45, $x, $y, $black, $font, 'and Zend Engine ' . zend_version());
  
  // Output to browser
  header('Content-type: image/png');
  
  imagepng($im);
  imagedestroy($im);
?>





This function requires both the GD library and the FreeType library.

|imagettftext|

vim:ft=help:
