*SQLiteDatabase->fetchColumnTypes* -- Return an array of column types from a
particular table

  array sqlite_fetch_column_types(string table_name, resource dbhandle [, int result_type])~

Object oriented style (method):

  array fetchColumnTypes(string table_name, resource dbhandle [, int result_type, string table_name [, int result_type]])~

|sqlite_fetch_column_types| returns an array of column data types from the
specified {table_name} table.

{table_name} The table name to query.

{dbhandle} The SQLite Database resource; returned from |sqlite_open| when used
procedurally. This parameter is not required when using the object-oriented
method.

{result_type} The optional {result_type} parameter accepts a constant and
determines how the returned array will be indexed. Using SQLITE_ASSOC will
return only associative indices (named fields) while SQLITE_NUM will return
only numerical indices (ordinal field numbers). SQLITE_BOTH will return both
associative and numerical indices. SQLITE_ASSOC is the default for this
function.

Returns an array of column data types; FALSE on error.

The column names returned by SQLITE_ASSOC and SQLITE_BOTH will be case-folded
according to the value of the sqlite.assoc_case configuration option.

Version Description 5.1.0 Added {result_type}

Procedural example

<?php >
  $db = sqlite_open('mysqlitedb');
  sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
  $cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);
  
  foreach ($cols as $column => $type) {
      echo "Column: $column  Type: $type\n";
  }
?>





Object-oriented example

<?php >
  $db = new SQLiteDatabase('mysqlitedb');
  $db->query('CREATE TABLE foo (bar varchar(10), arf text)');
  $cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);
  
  foreach ($cols as $column => $type) {
      echo "Column: $column  Type: $type\n";
  }
?>

The above example will output:

  Column: bar  Type: VARCHAR
  Column: arf  Type: TEXT



vim:ft=help:
